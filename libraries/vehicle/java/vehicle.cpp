/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <webots/vehicle/Driver.hpp>
#include <webots/vehicle/Car.hpp>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_new_1Driver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  webots::Driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (webots::Driver *)new webots::Driver();
  *(webots::Driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getDriverInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  webots::Driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (webots::Driver *)webots::Driver::getDriverInstance();
  *(webots::Driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_delete_1Driver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Driver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1isInitialisationPossible(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)webots::Driver::isInitialisationPossible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (int)(arg1)->step();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setSteeringAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSteeringAngle(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getSteeringAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (double)(arg1)->getSteeringAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setCruisingSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCruisingSpeed(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getTargetCruisingSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (double)(arg1)->getTargetCruisingSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getCurrentSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (double)(arg1)->getCurrentSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setThrottle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setThrottle(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getThrottle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (double)(arg1)->getThrottle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setBrakeIntensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setBrakeIntensity(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getBrakeIntensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (double)(arg1)->getBrakeIntensity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setIndicator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  webots::Driver::IndicatorState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = (webots::Driver::IndicatorState)jarg2; 
  (arg1)->setIndicator(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setHazardFlashers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setHazardFlashers(arg2);
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getIndicator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  webots::Driver::IndicatorState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (webots::Driver::IndicatorState)(arg1)->getIndicator();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getHazardFlashers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (bool)(arg1)->getHazardFlashers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setDippedBeams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDippedBeams(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setAntifogLights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAntifogLights(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getDippedBeams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (bool)(arg1)->getDippedBeams();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getAntifogLights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (bool)(arg1)->getAntifogLights();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getRpm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (double)(arg1)->getRpm();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getGear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (int)(arg1)->getGear();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setGear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setGear(arg2);
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getGearNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (int)(arg1)->getGearNumber();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getControlMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  webots::Driver::ControlMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (webots::Driver::ControlMode)(arg1)->getControlMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setWiperMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  webots::Driver::WiperMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = (webots::Driver::WiperMode)jarg2; 
  (arg1)->setWiperMode(arg2);
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getWiperMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  webots::Driver::WiperMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (webots::Driver::WiperMode)(arg1)->getWiperMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setBrake(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setBrake(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1setWipersMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  webots::Driver::WiperMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  arg2 = (webots::Driver::WiperMode)jarg2; 
  (arg1)->setWipersMode(arg2);
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1getWipersMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Driver *arg1 = (webots::Driver *) 0 ;
  webots::Driver::WiperMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Driver **)&jarg1; 
  result = (webots::Driver::WiperMode)(arg1)->getWipersMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_new_1Car(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  webots::Car *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (webots::Car *)new webots::Car();
  *(webots::Car **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_delete_1Car(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Car *arg1 = (webots::Car *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Car **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  webots::Car::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (webots::Car::Type)(arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getEngineType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  webots::Car::EngineType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (webots::Car::EngineType)(arg1)->getEngineType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1setIndicatorPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Car *arg1 = (webots::Car *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setIndicatorPeriod(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getIndicatorPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (double)(arg1)->getIndicatorPeriod();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getBackwardsLights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (bool)(arg1)->getBackwardsLights();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getBrakeLights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (bool)(arg1)->getBrakeLights();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getTrackFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (double)(arg1)->getTrackFront();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getTrackRear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (double)(arg1)->getTrackRear();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getWheelbase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (double)(arg1)->getWheelbase();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getFrontWheelRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (double)(arg1)->getFrontWheelRadius();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getRearWheelRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (double)(arg1)->getRearWheelRadius();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getWheelEncoder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  webots::Car::WheelIndex arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  arg2 = (webots::Car::WheelIndex)jarg2; 
  result = (double)(arg1)->getWheelEncoder(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getWheelSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  webots::Car::WheelIndex arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  arg2 = (webots::Car::WheelIndex)jarg2; 
  result = (double)(arg1)->getWheelSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1setLeftSteeringAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Car *arg1 = (webots::Car *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLeftSteeringAngle(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1setRightSteeringAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Car *arg1 = (webots::Car *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRightSteeringAngle(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getRightSteeringAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (double)(arg1)->getRightSteeringAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1getLeftSteeringAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Car *arg1 = (webots::Car *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  result = (double)(arg1)->getLeftSteeringAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1enableLimitedSlipDifferential(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  webots::Car *arg1 = (webots::Car *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableLimitedSlipDifferential(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1enableIndicatorAutoDisabling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  webots::Car *arg1 = (webots::Car *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Car **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableIndicatorAutoDisabling(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Driver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Supervisor **)&baseptr = *(webots::Driver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_vehicle_vehicleJNI_Car_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Driver **)&baseptr = *(webots::Car **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

