/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.cyberbotics.webots.controller.vehicle;

import com.cyberbotics.webots.controller.Supervisor;

public class Car extends Driver {
  private transient long swigCPtr;

  protected Car(long cPtr, boolean cMemoryOwn) {
    super(vehicleJNI.Car_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Car obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        vehicleJNI.delete_Car(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Car() {
    this(vehicleJNI.new_Car(), true);
  }

  public int getType() {
    return vehicleJNI.Car_getType(swigCPtr, this);
  }

  public int getEngineType() {
    return vehicleJNI.Car_getEngineType(swigCPtr, this);
  }

  public void setIndicatorPeriod(double period) {
    vehicleJNI.Car_setIndicatorPeriod(swigCPtr, this, period);
  }

  public double getIndicatorPeriod() {
    return vehicleJNI.Car_getIndicatorPeriod(swigCPtr, this);
  }

  public boolean getBackwardsLights() {
    return vehicleJNI.Car_getBackwardsLights(swigCPtr, this);
  }

  public boolean getBrakeLights() {
    return vehicleJNI.Car_getBrakeLights(swigCPtr, this);
  }

  public double getTrackFront() {
    return vehicleJNI.Car_getTrackFront(swigCPtr, this);
  }

  public double getTrackRear() {
    return vehicleJNI.Car_getTrackRear(swigCPtr, this);
  }

  public double getWheelbase() {
    return vehicleJNI.Car_getWheelbase(swigCPtr, this);
  }

  public double getFrontWheelRadius() {
    return vehicleJNI.Car_getFrontWheelRadius(swigCPtr, this);
  }

  public double getRearWheelRadius() {
    return vehicleJNI.Car_getRearWheelRadius(swigCPtr, this);
  }

  public double getWheelEncoder(int wheel) {
    return vehicleJNI.Car_getWheelEncoder(swigCPtr, this, wheel);
  }

  public double getWheelSpeed(int wheel) {
    return vehicleJNI.Car_getWheelSpeed(swigCPtr, this, wheel);
  }

  public void setLeftSteeringAngle(double angle) {
    vehicleJNI.Car_setLeftSteeringAngle(swigCPtr, this, angle);
  }

  public void setRightSteeringAngle(double angle) {
    vehicleJNI.Car_setRightSteeringAngle(swigCPtr, this, angle);
  }

  public double getRightSteeringAngle() {
    return vehicleJNI.Car_getRightSteeringAngle(swigCPtr, this);
  }

  public double getLeftSteeringAngle() {
    return vehicleJNI.Car_getLeftSteeringAngle(swigCPtr, this);
  }

  public void enableLimitedSlipDifferential(boolean enable) {
    vehicleJNI.Car_enableLimitedSlipDifferential(swigCPtr, this, enable);
  }

  public void enableIndicatorAutoDisabling(boolean enable) {
    vehicleJNI.Car_enableIndicatorAutoDisabling(swigCPtr, this, enable);
  }

  // Type 
  public final static int TRACTION = 0;
  public final static int PROPULSION = TRACTION + 1;
  public final static int FOUR_BY_FOUR = PROPULSION + 1;

  // EngineType 
  public final static int COMBUSTION_ENGINE = 0;
  public final static int ELECTRIC_ENGINE = COMBUSTION_ENGINE + 1;
  public final static int PARALLEL_HYBRID_ENGINE = ELECTRIC_ENGINE + 1;
  public final static int POWER_SPLIT_HYBRID_ENGINE = PARALLEL_HYBRID_ENGINE + 1;

  // WheelIndex 
  public final static int WHEEL_FRONT_RIGHT = 0;
  public final static int WHEEL_FRONT_LEFT = WHEEL_FRONT_RIGHT + 1;
  public final static int WHEEL_REAR_RIGHT = WHEEL_FRONT_LEFT + 1;
  public final static int WHEEL_REAR_LEFT = WHEEL_REAR_RIGHT + 1;
  public final static int WHEEL_NB = WHEEL_REAR_LEFT + 1;

}
